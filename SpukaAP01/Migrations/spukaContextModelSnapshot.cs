// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpukaAp.Models;

namespace SpukaAP01.Migrations
{
    [DbContext(typeof(spukaContext))]
    partial class spukaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SpukaAp.Models.TAdressen", b =>
                {
                    b.Property<string>("AdrAdresse")
                        .HasColumnName("adrAdresse")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("AdrAnrede")
                        .HasColumnName("adrAnrede");

                    b.Property<DateTime?>("AdrGdatum")
                        .HasColumnName("adrGDatum")
                        .HasColumnType("datetime");

                    b.Property<string>("AdrMandant")
                        .IsRequired()
                        .HasColumnName("adrMandant")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("AdrName")
                        .IsRequired()
                        .HasColumnName("adrName")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AdrOrt")
                        .HasColumnName("adrOrt")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AdrPlz")
                        .HasColumnName("adrPLZ")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("AdrStrasse")
                        .HasColumnName("adrStrasse")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("AdrTitel")
                        .HasColumnName("adrTitel")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("AdrTyp")
                        .HasColumnName("adrTyp");

                    b.Property<string>("AdrVorname")
                        .HasColumnName("adrVorname")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("AdrAdresse")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("AdrAnrede");

                    b.HasIndex("AdrTyp");

                    b.ToTable("t_Adressen");
                });

            modelBuilder.Entity("SpukaAp.Models.TAdressenTyp", b =>
                {
                    b.Property<int>("AdtTyp")
                        .HasColumnName("adtTyp");

                    b.Property<string>("AdtBezeichnung")
                        .IsRequired()
                        .HasColumnName("adtBezeichnung")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("AdtTyp")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("t_AdressenTyp");
                });

            modelBuilder.Entity("SpukaAp.Models.TAnrede", b =>
                {
                    b.Property<int>("AnrAnredeId")
                        .HasColumnName("anrAnredeID");

                    b.Property<string>("AnrAnrede")
                        .IsRequired()
                        .HasColumnName("anrAnrede")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<byte>("AnrJnperson")
                        .HasColumnName("anrJNPerson");

                    b.HasKey("AnrAnredeId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("t_Anrede");
                });

            modelBuilder.Entity("SpukaAp.Models.TBegStatus", b =>
                {
                    b.Property<int>("BstStatus")
                        .HasColumnName("bstStatus");

                    b.Property<string>("BstBezeichnung")
                        .IsRequired()
                        .HasColumnName("bstBezeichnung")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("BstStatus")
                        .HasName("PK_t_BeguenstigtenStatus")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("t_BegStatus");
                });

            modelBuilder.Entity("SpukaAp.Models.TBeguenstigte", b =>
                {
                    b.Property<string>("BegBeguenstigter")
                        .HasColumnName("begBeguenstigter")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BegAdresse")
                        .IsRequired()
                        .HasColumnName("begAdresse")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("BegEintrittsdatum")
                        .HasColumnName("begEintrittsdatum")
                        .HasColumnType("datetime");

                    b.Property<string>("BegMitglied")
                        .IsRequired()
                        .HasColumnName("begMitglied")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("BegPersonalNr")
                        .HasColumnName("begPersonalNr")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("BegStatus")
                        .HasColumnName("begStatus");

                    b.HasKey("BegBeguenstigter");

                    b.HasIndex("BegAdresse");

                    b.HasIndex("BegMitglied");

                    b.HasIndex("BegStatus");

                    b.ToTable("t_Beguenstigte");
                });

            modelBuilder.Entity("SpukaAp.Models.TEinrichtung", b =>
                {
                    b.Property<string>("EinId")
                        .HasColumnName("einID")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("EinAdresse")
                        .HasColumnName("einAdresse")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("EinBezeichnung")
                        .HasColumnName("einBezeichnung")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<byte?>("EinTyp")
                        .HasColumnName("einTyp");

                    b.HasKey("EinId");

                    b.HasIndex("EinAdresse");

                    b.HasIndex("EinTyp");

                    b.ToTable("t_Einrichtung");
                });

            modelBuilder.Entity("SpukaAp.Models.TEinrichtungTypen", b =>
                {
                    b.Property<byte>("EitTyp")
                        .HasColumnName("eitTyp");

                    b.Property<string>("EitBezeichnung")
                        .IsRequired()
                        .HasColumnName("eitBezeichnung")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.HasKey("EitTyp")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("t_EinrichtungTypen");
                });

            modelBuilder.Entity("SpukaAp.Models.TMandanten", b =>
                {
                    b.Property<string>("ManMandant")
                        .HasColumnName("manMandant")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ManAdresse")
                        .HasColumnName("manAdresse")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ManBezeichnung")
                        .IsRequired()
                        .HasColumnName("manBezeichnung")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ManEinrichtung")
                        .IsRequired()
                        .HasColumnName("manEinrichtung")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("ManMandant")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ManEinrichtung");

                    b.ToTable("t_Mandanten");
                });

            modelBuilder.Entity("SpukaAp.Models.TMitglieder", b =>
                {
                    b.Property<string>("MitMitglied")
                        .HasColumnName("mitMitglied")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("MitAdresse")
                        .IsRequired()
                        .HasColumnName("mitAdresse")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("MitMandant")
                        .HasColumnName("mitMandant")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("MitMitglied")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("MitAdresse");

                    b.HasIndex("MitMandant");

                    b.ToTable("t_Mitglieder");
                });

            modelBuilder.Entity("SpukaAp.Models.TVereinbarLeistgruppen", b =>
                {
                    b.Property<string>("VlgLeistungsgruppe")
                        .HasColumnName("vlgLeistungsgruppe")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool>("VlgAv")
                        .HasColumnName("vlgAV");

                    b.Property<string>("VlgBezeichnung")
                        .IsRequired()
                        .HasColumnName("vlgBezeichnung")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("VlgInvaliditaet")
                        .HasColumnName("vlgInvaliditaet");

                    b.Property<bool>("VlgTodesfall")
                        .HasColumnName("vlgTodesfall");

                    b.Property<string>("VlgVereinbarung")
                        .IsRequired()
                        .HasColumnName("vlgVereinbarung")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool>("VlgWuWrente")
                        .HasColumnName("vlgWuWRente");

                    b.HasKey("VlgLeistungsgruppe")
                        .HasName("PK_t_VereinbarungenLeistungsgruppen")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("VlgVereinbarung");

                    b.ToTable("t_VereinbarLeistgruppen");
                });

            modelBuilder.Entity("SpukaAp.Models.TVereinbarungen", b =>
                {
                    b.Property<string>("VerVereinbarung")
                        .HasColumnName("verVereinbarung")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("VerBezeichnung")
                        .HasColumnName("verBezeichnung")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("VerGueltigAb")
                        .HasColumnName("verGueltigAb")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("VerGueltigBis")
                        .HasColumnName("verGueltigBis")
                        .HasColumnType("datetime");

                    b.Property<string>("VerMitglied")
                        .IsRequired()
                        .HasColumnName("verMitglied")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("VerVereinbarung")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("VerMitglied");

                    b.ToTable("t_Vereinbarungen");
                });

            modelBuilder.Entity("SpukaAp.Models.TVereinbarungenDetails", b =>
                {
                    b.Property<string>("VedId")
                        .HasColumnName("vedID")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("VedLeistungsgruppe")
                        .IsRequired()
                        .HasColumnName("vedLeistungsgruppe")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<byte>("VedVersorgungstyp")
                        .HasColumnName("vedVersorgungstyp");

                    b.HasKey("VedId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("VedVersorgungstyp");

                    b.ToTable("t_VereinbarungenDetails");
                });

            modelBuilder.Entity("SpukaAp.Models.TVersorgungstypen", b =>
                {
                    b.Property<byte>("VetTyp")
                        .HasColumnName("vetTyp");

                    b.Property<string>("VetBezeichnung")
                        .IsRequired()
                        .HasColumnName("vetBezeichnung")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("VetTyp")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("t_Versorgungstypen");
                });

            modelBuilder.Entity("SpukaAp.Models.TZusagen", b =>
                {
                    b.Property<string>("ZusZusage")
                        .HasColumnName("zusZusage")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ZusBeguenstigter")
                        .IsRequired()
                        .HasColumnName("zusBeguenstigter")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("ZusGueltigAb")
                        .HasColumnName("zusGueltigAb")
                        .HasColumnType("datetime");

                    b.Property<string>("ZusLeistungsgruppe")
                        .IsRequired()
                        .HasColumnName("zusLeistungsgruppe")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("ZusZusage")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ZusBeguenstigter");

                    b.HasIndex("ZusLeistungsgruppe");

                    b.ToTable("t_Zusagen");
                });

            modelBuilder.Entity("SpukaAp.Models.TZusagenDetails", b =>
                {
                    b.Property<string>("ZudId")
                        .HasColumnName("zudID")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime>("ZudGueltigAb")
                        .HasColumnName("zudGueltigAb")
                        .HasColumnType("datetime");

                    b.Property<byte>("ZudStatus")
                        .HasColumnName("zudStatus");

                    b.Property<byte>("ZudVersorgungstyp")
                        .HasColumnName("zudVersorgungstyp");

                    b.Property<decimal>("ZudWertAus")
                        .HasColumnName("zudWertAus")
                        .HasColumnType("money");

                    b.Property<decimal>("ZudWertEin")
                        .HasColumnName("zudWertEin")
                        .HasColumnType("money");

                    b.Property<string>("ZudZusage")
                        .IsRequired()
                        .HasColumnName("zudZusage")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("ZudId")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.HasIndex("ZudStatus");

                    b.HasIndex("ZudVersorgungstyp");

                    b.HasIndex("ZudZusage");

                    b.ToTable("t_ZusagenDetails");
                });

            modelBuilder.Entity("SpukaAp.Models.TZusagenStatus", b =>
                {
                    b.Property<byte>("ZstStatus")
                        .HasColumnName("zstStatus");

                    b.Property<string>("ZstBezeichnung")
                        .IsRequired()
                        .HasColumnName("zstBezeichnung")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("ZstStatus")
                        .HasAnnotation("SqlServer:Clustered", false);

                    b.ToTable("t_ZusagenStatus");
                });

            modelBuilder.Entity("SpukaAp.Models.TAdressen", b =>
                {
                    b.HasOne("SpukaAp.Models.TAnrede", "AdrAnredeNavigation")
                        .WithMany("TAdressen")
                        .HasForeignKey("AdrAnrede")
                        .HasConstraintName("FK_Adressen_hat_die_Anrede");

                    b.HasOne("SpukaAp.Models.TAdressenTyp", "AdrTypNavigation")
                        .WithMany("TAdressen")
                        .HasForeignKey("AdrTyp")
                        .HasConstraintName("FK_Adressen_hat_AdrTyp");
                });

            modelBuilder.Entity("SpukaAp.Models.TBeguenstigte", b =>
                {
                    b.HasOne("SpukaAp.Models.TAdressen", "BegAdresseNavigation")
                        .WithMany("TBeguenstigte")
                        .HasForeignKey("BegAdresse")
                        .HasConstraintName("FK_Begungstigte_hat_die_Adresse");

                    b.HasOne("SpukaAp.Models.TMitglieder", "BegMitgliedNavigation")
                        .WithMany("TBeguenstigte")
                        .HasForeignKey("BegMitglied")
                        .HasConstraintName("FK_Begungstigte_hat_Mitglieder");

                    b.HasOne("SpukaAp.Models.TBegStatus", "BegStatusNavigation")
                        .WithMany("TBeguenstigte")
                        .HasForeignKey("BegStatus")
                        .HasConstraintName("FK_Begungstigte_hat_Status");
                });

            modelBuilder.Entity("SpukaAp.Models.TEinrichtung", b =>
                {
                    b.HasOne("SpukaAp.Models.TAdressen", "EinAdresseNavigation")
                        .WithMany("TEinrichtung")
                        .HasForeignKey("EinAdresse")
                        .HasConstraintName("FK_Einrichtung_hat_die_Adresse");

                    b.HasOne("SpukaAp.Models.TEinrichtungTypen", "EinTypNavigation")
                        .WithMany("TEinrichtung")
                        .HasForeignKey("EinTyp")
                        .HasConstraintName("FK_Einrichtung_ist_vom_Typ");
                });

            modelBuilder.Entity("SpukaAp.Models.TMandanten", b =>
                {
                    b.HasOne("SpukaAp.Models.TEinrichtung", "ManEinrichtungNavigation")
                        .WithMany("TMandanten")
                        .HasForeignKey("ManEinrichtung")
                        .HasConstraintName("FK_Mandanten_hat_Einrichtung");
                });

            modelBuilder.Entity("SpukaAp.Models.TMitglieder", b =>
                {
                    b.HasOne("SpukaAp.Models.TAdressen", "MitAdresseNavigation")
                        .WithMany("TMitglieder")
                        .HasForeignKey("MitAdresse")
                        .HasConstraintName("FK_Mitglieder_hat_die_Adresse");

                    b.HasOne("SpukaAp.Models.TMandanten", "MitMandantNavigation")
                        .WithMany("TMitglieder")
                        .HasForeignKey("MitMandant")
                        .HasConstraintName("FK_Mitglieder_ist_vom_Mandant");
                });

            modelBuilder.Entity("SpukaAp.Models.TVereinbarLeistgruppen", b =>
                {
                    b.HasOne("SpukaAp.Models.TVereinbarungen", "VlgVereinbarungNavigation")
                        .WithMany("TVereinbarLeistgruppen")
                        .HasForeignKey("VlgVereinbarung")
                        .HasConstraintName("FK_VereinbarLeistgruppen_hat_Vereinbarung");
                });

            modelBuilder.Entity("SpukaAp.Models.TVereinbarungen", b =>
                {
                    b.HasOne("SpukaAp.Models.TMitglieder", "VerMitgliedNavigation")
                        .WithMany("TVereinbarungen")
                        .HasForeignKey("VerMitglied")
                        .HasConstraintName("FK_Vereinbarungen_hat_Mitglied");
                });

            modelBuilder.Entity("SpukaAp.Models.TVereinbarungenDetails", b =>
                {
                    b.HasOne("SpukaAp.Models.TVersorgungstypen", "VedVersorgungstypNavigation")
                        .WithMany("TVereinbarungenDetails")
                        .HasForeignKey("VedVersorgungstyp")
                        .HasConstraintName("FK_VereinbarungenDetails_hat_Typen");
                });

            modelBuilder.Entity("SpukaAp.Models.TZusagen", b =>
                {
                    b.HasOne("SpukaAp.Models.TBeguenstigte", "ZusBeguenstigterNavigation")
                        .WithMany("TZusagen")
                        .HasForeignKey("ZusBeguenstigter")
                        .HasConstraintName("FK_Zusagen_hat_Beguenstigte");

                    b.HasOne("SpukaAp.Models.TVereinbarLeistgruppen", "ZusLeistungsgruppeNavigation")
                        .WithMany("TZusagen")
                        .HasForeignKey("ZusLeistungsgruppe")
                        .HasConstraintName("FK_Zusagen_hat_VerLeistunGrup");
                });

            modelBuilder.Entity("SpukaAp.Models.TZusagenDetails", b =>
                {
                    b.HasOne("SpukaAp.Models.TZusagenStatus", "ZudStatusNavigation")
                        .WithMany("TZusagenDetails")
                        .HasForeignKey("ZudStatus")
                        .HasConstraintName("FK_ZusagenDetails_hat_Status");

                    b.HasOne("SpukaAp.Models.TVersorgungstypen", "ZudVersorgungstypNavigation")
                        .WithMany("TZusagenDetails")
                        .HasForeignKey("ZudVersorgungstyp")
                        .HasConstraintName("FK_ZusagenDetails_zum_versorgTyp");

                    b.HasOne("SpukaAp.Models.TZusagen", "ZudZusageNavigation")
                        .WithMany("TZusagenDetails")
                        .HasForeignKey("ZudZusage")
                        .HasConstraintName("FK_ZusagenDetails_kpmm_von_Zug");
                });
#pragma warning restore 612, 618
        }
    }
}
